options
{
  static = false;
}

PARSER_BEGIN(parser_logo)

package parser;

import java.util.ArrayList;
import classeDuProgramme.*;
import graphique.*;

public class parser_logo {}

PARSER_END(parser_logo)


SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}


TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
}

TOKEN :
{  
  < fonction : ["a"-"z"] (["a"-"z"] | ["0"-"9"])*>
| < nbr :  ["0"-"9"]|(["0"-"9"] ["0"-"9"] )|(["0"-"9"] ["0"-"9"] ["0"-"9"] ) >
| < couleur :  ("Noir" | "Bleu" | "Rouge" | "Vert" | "Rose") >
}



Programme program (JCanvas feuille) : {Instruction instr; DefFonction defF;}
{
  {
    Programme programme = new Programme(feuille);
  }
  ( instr = instruction()
    {
      programme.addInstruction(instr);
    }
  | defF = def_fonction()
    {
      programme.addFonction(defF);
    }
  )* < EOF >
  {
    return programme;
  }
  
}


DefFonction def_fonction () : {Token name;
    ArrayList<Instruction > instructions = new ArrayList<Instruction >();
    Instruction i; }
{
   "POUR" name = < fonction > (i = instruction()
   {
     instructions.add(i);
   }
   )+ "FIN"
   {
     DefFonction fonction = new DefFonction(name.toString(), instructions);
     return fonction;
   }
}

Instruction instruction () :{Token nbreRepete; Instruction i; Commande c;	
  ArrayList<Instruction > instructions = new ArrayList<Instruction >();
}
{
    ("REPETE" nbreRepete = < nbr > ( i = instruction()
   	{
	  instructions.add(i);	  
	}
	)+ "FINREPETE"
	{
	  Repete repete = new Repete (Integer.parseInt(nbreRepete.toString()), instructions);
	  return repete;
	}
   	) | c = cmd()   	{   	  return c;
   	} 

}

Commande cmd () : {Token name; Commande c;}
{
  name = < fonction >
  {
    Fonction fonction = new Fonction(name.toString(), 0); 
    return fonction;
  } |  (c = deplacement()| c = modifetat() | c = efface())  {    return c;  }  
}

Deplacement deplacement () : {Token nombre;}
{
  ("AVANCE" nombre = < nbr >
  {
    return new Deplacement("avance",Integer.valueOf(nombre.toString()));
  }
  )  | ("RECULE" nombre = < nbr >
  {
    return new Deplacement("recule",Integer.valueOf(nombre.toString()));
  }
  )  | ("TOURNEDROITE" nombre = < nbr >
  {
    return new Deplacement("tournedroite",Integer.valueOf(nombre.toString()));
  }
  )  |  ("TOURNEGAUCHE" nombre = < nbr >
  {
    return new Deplacement("tournegauche",Integer.valueOf(nombre.toString()));
  }
  )
}

ModifEtat modifetat () : {Token nombre; Token coloris;}
{
  ("LEVECRAYON"
  {
    return new ModifEtat("levecrayon",0);
  }
  ) | ("BAISSECRAYON"
  {
    return new ModifEtat("baissecrayon",0);
  }
  ) | ("TAILLECRAYON" nombre = < nbr >
  {
    return new ModifEtat("taillecrayon",Integer.valueOf(nombre.toString()));
  }
  ) | ("COULEUR" coloris = < couleur >
  {
    return new ModifEtat("couleur",coloris.toString());
  }
  )
}

Efface efface () : {}
{
  "EFFACE"
  {
    return new Efface("efface", 0);
  }
}


void sum() :
{}
{
  term()
  (
    (
      < PLUS >
    | < MINUS >
    )
    term()
  )*
}

void term() : {}
{
  unary()
  (
    (
      < MULTIPLY >
    | < DIVIDE >
    )
    unary()
  )*
}

void unary() :
{}
{
  < MINUS > element()
| element()
}

void element() :
{}
{
  < nbr >
| "(" sum() ")"
}